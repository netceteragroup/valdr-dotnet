namespace Nca.Valdr.Console
{
    using System.IO;
    using System.Text;

    /// <summary>
    /// Runs the request and creates the output file
    /// </summary>
    public class CliRunner
    {
        private readonly CliOptions _options;

        public CliRunner(CliOptions options)
        {
            _options = options;
        }

        /// <summary>
        /// Executes the request
        /// </summary>
        public void Execute()
        {
            var parser = new AssemblyParser(_options.AssemblyFileName, _options.TargetNamespace, _options.Culture);
            var result = parser.Parse();
            var output = BuildJavaScript(_options.Application, result.ToString());

            using (var writer = new StreamWriter(_options.OutputFileName))
            {
                writer.Write(output);
            }
        }

        /// <summary>
        /// Build JavaScript
        /// </summary>
        /// <param name="application">Application name.</param>
        /// <param name="metadata">Valdr metadata.</param>
        /// <returns>The content of the JavaScript validation rule file (usually app.valdr.js).</returns>
        internal string BuildJavaScript(string application, string metadata)
        {
            var output = new StringBuilder();
            output.AppendLine($"/*! Auto-generated. This file was generated by Nca.Valdr. */");
            output.AppendLine("(function() {");
            output.AppendLine("    \"use strict\";");
            output.AppendLine("    angular");
            output.AppendLine($"        .module(\"{application}\")");
            output.AppendLine("        .config(config);");
            output.AppendLine("    config.$inject = [\"valdrProvider\"];");
            output.AppendLine("    function config(valdrProvider) {");
            output.AppendLine($"        valdrProvider.addConstraints({metadata});");
            output.AppendLine("}})();");

            return output.ToString();
        }
    }
}
